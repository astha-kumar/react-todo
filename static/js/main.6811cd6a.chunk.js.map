{"version":3,"sources":["logoInPng.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","newItem","list","todoValue","id","Date","now","value","idDone","this","push","setState","updatedlist","filter","item","input","src","logo","width","height","className","text","classNamename","placeholder","onChange","e","updateInput","target","onClick","addItem","disabled","length","map","key","type","name","checked","isDone","deleteItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,uC,8MCuF5BC,G,wDAjFX,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CACTC,QAAQ,GACRC,KAAK,IAJS,E,oDAOVC,GACN,GAAiB,KAAdA,EACH,CACE,IAAMF,EAAQ,CACZG,GAAGC,KAAKC,MACRC,MAAMJ,EACNK,QAAO,GAEHN,EAAK,YAAIO,KAAKT,MAAME,MAC1BA,EAAKQ,KAAKT,GAEVQ,KAAKE,SAAS,CACZT,OACAD,QAAQ,Q,iCAKJG,GACT,IACMQ,EADK,YAAKH,KAAKT,MAAME,MACHW,QAAO,SAAAC,GAAI,OAAIA,EAAKV,KAAOA,KACnDK,KAAKE,SAAS,CAACT,KAAKU,M,kCAEVG,GACVN,KAAKE,SAAS,CAACV,QAAQc,M,+BAGd,IAAD,OACN,OACE,6BACE,yBAAKC,IAAKC,IAAMC,MAAM,MAAMC,OAAO,MAAMC,UAAU,SACnD,wBAAIA,UAAU,aAAd,aACA,yBAAKA,UAAU,aACb,iDACA,2BACCC,KAAK,OACLC,cAAc,aACdC,YAAY,kBACZhB,MAAOE,KAAKT,MAAMC,QAClBuB,SAAU,SAAAC,GAAC,OAAG,EAAKC,YAAYD,EAAEE,OAAOpB,UAP3C,IAQM,6BACH,4BACEa,UAAU,UACVQ,QAAS,kBAAK,EAAKC,QAAQ,EAAK7B,MAAMC,UACtC6B,UAAWrB,KAAKT,MAAMC,QAAQ8B,QAHhC,YAKE,yBAAKX,UAAU,QACf,4BACCX,KAAKT,MAAME,KAAK8B,KAAI,SAAAlB,GAClB,OACE,wBAAImB,IAAKnB,EAAKV,IACZ,2BACA8B,KAAK,WACLC,KAAK,SACLC,QAAStB,EAAKuB,OACdb,SAAU,eAETV,EAAKP,MACN,4BACAa,UAAU,MACVQ,QAAS,kBAAI,EAAKU,WAAWxB,EAAKV,MAFlC,sB,GAnELmC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6811cd6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logoInPng.53448e0a.png\";","import React from 'react';\r\nimport logo from './logoInPng.png';\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component{\r\n\r\n    constructor(props){\r\n      super(props);\r\n      this.state={\r\n        newItem:\"\",\r\n        list:[]\r\n      };\r\n    }\r\n    addItem(todoValue){\r\n      if(todoValue !== \"\")\r\n      {\r\n        const newItem={\r\n          id:Date.now(),\r\n          value:todoValue,\r\n          idDone:false\r\n        };\r\n        const list=[...this.state.list];\r\n        list.push(newItem);\r\n\r\n        this.setState({\r\n          list,\r\n          newItem:\"\"\r\n        });\r\n      }\r\n    }\r\n\r\n   deleteItem(id){\r\n     const list= [...this.state.list];\r\n     const updatedlist= list.filter(item => item.id !== id);\r\n     this.setState({list:updatedlist});\r\n   }\r\n   updateInput(input){\r\n     this.setState({newItem:input});\r\n   }\r\n\r\n     render(){\r\n       return(\r\n         <div>\r\n           <img src={logo} width=\"100\" height=\"100\" className=\"logo\"/>\r\n           <h1 className=\"app-title\"> ToDo App</h1>\r\n           <div className=\"container\">\r\n             <label>Add an Item...</label>\r\n             <input\r\n              text=\"text\"\r\n              classNamename=\"input-text\"\r\n              placeholder=\"Enter your item\"\r\n              value={this.state.newItem}\r\n              onChange={e =>this.updateInput(e.target.value)}\r\n              /> <br />\r\n              <button\r\n                className=\"add-btn\"\r\n                onClick={()=> this.addItem(this.state.newItem)}\r\n                disabled={!this.state.newItem.length}\r\n                >AddTodo </button>\r\n                <div className=\"list\">\r\n                <ul>\r\n                {this.state.list.map(item=> {\r\n                   return(\r\n                     <li key={item.id}>\r\n                       <input\r\n                       type=\"checkbox\"\r\n                       name=\"idDone\"\r\n                       checked={item.isDone}\r\n                       onChange={()=>{}}\r\n                       />\r\n                       {item.value}\r\n                       <button\r\n                       className=\"btn\"\r\n                       onClick={()=>this.deleteItem(item.id)}\r\n                       >Delete</button>\r\n\r\n                     </li>\r\n                   );\r\n                })}\r\n\r\n                </ul>\r\n              </div>\r\n           </div>\r\n         </div>\r\n       );\r\n     }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}